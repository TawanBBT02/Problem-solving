นี่คือโค้ดที่ปรับให้เป็นรูปแบบ Class เพื่อให้มีโครงสร้างที่ชัดเจนขึ้นและสะดวกในการใช้งานและจัดการข้อมูลของนักเรียน:

python
คัดลอก
แก้ไข
class StudentScoreManager:
    def __init__(self):
        self.students = []

    def add_student(self, name, score):
        self.students.append((name, score))

    def display_students(self):
        print("\n--Unsorted Scores--")
        for name, score in self.students:
            print(f"{name}: {score}")

    def sort_students(self):
        # Bubble sort by score in descending order
        for i in range(len(self.students)):
            for j in range(len(self.students) - i - 1):
                if self.students[j][1] < self.students[j + 1][1]:
                    self.students[j], self.students[j + 1] = self.students[j + 1], self.students[j]

    def display_sorted_students(self):
        print("\n--Sorted Scores (Bubble Sort)--")
        for name, score in self.students:
            print(f"{name}: {score}")

    def display_top_scores(self, top_n=3):
        print(f"\n--Top {top_n} Highest Scores--")
        for name, score in self.students[:top_n]:
            print(f"{name}: {score}")

    def display_bottom_scores(self, bottom_n=3):
        print(f"\n--Top {bottom_n} Lowest Scores--")
        for name, score in self.students[-1:-(bottom_n + 1):-1]:
            print(f"{name}: {score}")

    def search_by_score(self, score_to_search):
        found_students = [name for name, score in self.students if score == score_to_search]
        if found_students:
            print(f"Found student(s) with score {score_to_search}: {', '.join(found_students)}")
        else:
            print(f"No students found with score {score_to_search}")


# Main Program
if __name__ == "__main__":
    manager = StudentScoreManager()
    Nstd = int(input("Enter the number of students: "))

    for _ in range(Nstd):
        name = input("Enter student name: ")
        score = float(input(f"Enter student score for {name}: "))
        manager.add_student(name, score)

    manager.display_students()
    manager.sort_students()
    manager.display_sorted_students()
    manager.display_top_scores()
    manager.display_bottom_scores()

    while True:
        search_score = input("\nEnter the score to search (or type 'exit' to quit): ")
        if search_score.lower() == 'exit':
            break
        manager.search_by_score(float(search_score))
วิธีการทำงานของ Class
StudentScoreManager: คลาสหลักที่จัดการการทำงานของข้อมูลนักเรียน
add_student: เพิ่มข้อมูลนักเรียน
display_students: แสดงคะแนนก่อนเรียงลำดับ
sort_students: ใช้ Bubble Sort เรียงคะแนนจากสูงไปต่ำ
display_sorted_students: แสดงคะแนนที่เรียงลำดับแล้ว
display_top_scores: แสดงคะแนนสูงสุด (ค่าเริ่มต้นคือ 3 อันดับแรก)
display_bottom_scores: แสดงคะแนนต่ำสุด (ค่าเริ่มต้นคือ 3 อันดับล่างสุด)
search_by_score: ค้นหาชื่อนักเรียนที่มีคะแนนที่ระบุ
โค้ดนี้ทำให้การจัดการข้อมูลง่ายขึ้นและเหมาะสำหรับการปรับแต่งฟังก์ชันเพิ่มเติมในอนาคต!