Radix Sort เป็นอัลกอริธึมสำหรับการเรียงลำดับตัวเลข โดยใช้หลักการจัดเรียงทีละหลักของตัวเลขจากน้อยไปหามาก (เช่น เริ่มจากหลักหน่วย ตามด้วยหลักสิบ หลักร้อย ฯลฯ) จนกว่าทุกหลักจะถูกจัดเรียงสมบูรณ์

หลักการทำงาน
	1.	แบ่งหลักตัวเลข (Digits):
	•	เลือกจัดการตัวเลขทีละหลัก เช่น เริ่มจากหลักหน่วย > หลักสิบ > หลักร้อย ฯลฯ
	•	หากตัวเลขที่ยาวที่สุดมี 3 หลัก (เช่น 802) จะต้องเรียงทั้งหมด 3 รอบ
	2.	ใช้ Counting Sort เป็นตัวช่วยจัดเรียงในแต่ละหลัก:
	•	ใช้ Counting Sort (เหมาะสำหรับการจัดเรียงข้อมูลตัวเลข) เป็นเครื่องมือในการจัดลำดับค่าของตัวเลขที่อยู่ในหลักปัจจุบัน เช่น สำหรับหลักสิบก็จะพิจารณาเฉพาะตัวเลขในตำแหน่ง “สิบ”
	3.	วนรอบเรียงตามหลักจนถึงหลักสูงสุด:
	•	วนซ้ำการจัดเรียงสำหรับแต่ละหลัก (หน่วย, สิบ, ร้อย ฯลฯ) จนถึงตัวเลขที่มีหลักเยอะที่สุดในอาร์เรย์
	4.	ผลลัพธ์ที่เรียงเสร็จสมบูรณ์:
	•	หลังจากจัดเรียงตัวเลขครบทุกหลักแล้ว จะได้ผลลัพธ์ที่เรียงจากน้อยไปหามาก

ตัวอย่างโค้ด (ภาษาไทยอธิบาย)

1. การจัดเรียงแต่ละหลัก
ฟังก์ชัน counting_sort(arr, exp) จะเป็นตัวช่วยจัดเรียงตัวเลขที่อยู่ในตำแหน่งหลักที่เรากำลังพิจารณา เช่น:
	•	ถ้า exp = 1 จะดูเฉพาะ “หลักหน่วย”
	•	ถ้า exp = 10 จะดูเฉพาะ “หลักสิบ”

def counting_sort(arr, exp):
    n = len(arr)
    output = [0] * n  # สร้างอาร์เรย์เก็บผลลัพธ์ชั่วคราว
    count = [0] * 10  # สร้างอาร์เรย์นับจำนวนของแต่ละตัวเลข (0-9)

    # นับจำนวนตัวเลขที่อยู่ในหลักปัจจุบัน (exp)
    for i in range(n):
        index = (arr[i] // exp) % 10  # ดึงเฉพาะหลักที่สนใจ
        count[index] += 1

    # ปรับตำแหน่งของ count ให้แสดงตำแหน่งสุดท้าย
    for i in range(1, 10):
        count[i] += count[i - 1]

    # เรียงลำดับตัวเลขในหลักที่กำหนด และจัดใส่ใน output
    i = n - 1
    while i >= 0:
        index = (arr[i] // exp) % 10
        output[count[index] - 1] = arr[i]
        count[index] -= 1
        i -= 1

    # คัดลอกค่ากลับไปยัง arr (อัปเดตอาร์เรย์หลัก)
    for i in range(n):
        arr[i] = output[i]

2. เริ่มเรียงตัวเลขในทุกหลัก
ฟังก์ชัน radix_sort(arr) จะทำการค้นหาค่าตัวเลขที่มากที่สุดในอาร์เรย์ เพื่อตรวจสอบจำนวนหลักสูงสุด (เช่น ถ้าค่ามากสุดคือ 802 ก็จะมี 3 หลัก) แล้วทำการวนลูปจัดเรียงแต่ละหลักทีละรอบ

def radix_sort(arr):
    # หาตัวเลขที่ใหญ่ที่สุดในอาร์เรย์
    max_val = max(arr)

    # วนลูปไปทีละหลัก (เริ่มจากหลักหน่วย exp=1)
    exp = 1
    while max_val // exp > 0:
        counting_sort(arr, exp)  # เรียกใช้ counting sort
        exp *= 10  # ขยับไปยังหลักถัดไป (หลักสิบ, ร้อย, ฯลฯ)

การทำงานแบบตัวอย่าง

Input:
arr = [170, 45, 75, 90, 802, 24, 2, 66]

ขั้นตอนการทำงาน:
	1.	จัดเรียงตามหลักหน่วย (exp = 1):
	•	เรียงใหม่ได้: [170, 90, 802, 2, 24, 45, 75, 66]
	2.	จัดเรียงตามหลักสิบ (exp = 10):
	•	เรียงใหม่ได้: [802, 2, 24, 45, 66, 75, 170, 90]
	3.	จัดเรียงตามหลักร้อย (exp = 100):
	•	เรียงใหม่ได้: [2, 24, 45, 66, 75, 90, 170, 802]

Output (ผลลัพธ์สุดท้าย):
[2, 24, 45, 66, 75, 90, 170, 802]

จุดเด่นของ Radix Sort
	1.	ทำงานได้รวดเร็วในข้อมูลที่ตัวเลขมีค่าไม่มาก และจำนวนหลักไม่เยอะ
	2.	Complexity: O(nk) (n = ข้อมูลทั้งหมด, k = จำนวนหลัก)

ข้อเสีย:
ไม่เหมาะกับข้อมูลที่ไม่ใช่ตัวเลข หรือข้อมูลที่ต้องเรียงแบบ Descending โดยตรง