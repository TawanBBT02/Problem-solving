โค้ดนี้คือการ **Radix Sort** แบบง่าย โดยใช้ **Counting Sort** เป็นขั้นตอนย่อยในการจัดเรียงตัวเลขตามหลัก (digit) จากน้อยไปมาก เริ่มจากหลักหน่วยไปจนถึงหลักที่สำคัญที่สุด โดยมีคำอธิบายตามนี้:

---

### **1. ฟังก์ชัน `counting_sort(arr, div)`**
ฟังก์ชันนี้รับพารามิเตอร์:
- **`arr`**: รายการตัวเลขที่ต้องการเรียงลำดับ  
- **`div`**: ตัวหารที่ระบุหลักที่กำลังจัดเรียง เช่น `div = 1` คือหลักหน่วย, `div = 10` คือหลักสิบ  

**กระบวนการทำงาน:**
1. **รวบรวมตัวเลขในลำดับที่ถูกต้องสำหรับหลักปัจจุบัน**:  
   - ตัวเลขแต่ละตัวจะถูกแบ่งด้วย `div` แล้วหาเศษที่เหลือ (`(a // div) % 10`) เพื่อดึงหลักปัจจุบัน
   - เปรียบเทียบค่าดังกล่าวกับค่าที่ต้องการ (`i` จาก `range(10)`)  
   - ถ้าหลักที่ดึงออกมา (`index`) ตรงกับ `i` จะเพิ่มตัวเลขนั้นเข้าใน `result`  

2. **อัปเดตค่าของ `arr` ด้วยค่าที่จัดเรียงใน `result`**:
   - ใช้ `for` loop เพื่อแทนที่ค่าของ `arr` ด้วยค่าจาก `result`

---

### **2. ฟังก์ชัน `radix_sort(arr)`**
ฟังก์ชันนี้คือกระบวนการหลักที่เรียกใช้ **Counting Sort** ซ้ำๆ สำหรับแต่ละหลักของตัวเลขใน `arr` เริ่มต้นจากหลักน้อยไปจนถึงหลักมาก

**กระบวนการทำงาน:**
1. **หาค่ามากที่สุดใน `arr`**:
   - `max_val = max(arr)` เพื่อกำหนดจำนวนหลักที่ต้องจัดเรียง  

2. **วนลูปโดยเพิ่มค่าของ `div` (ตัวหาร)**:
   - เริ่มที่ `div = 1` (หลักหน่วย) และเพิ่ม `div` คูณด้วย 10 ในแต่ละรอบเพื่อขยับไปยังหลักถัดไป เช่น หลักสิบ (`div = 10`), หลักร้อย (`div = 100`) เป็นต้น
   - เรียกใช้ `counting_sort` จัดเรียง `arr` ในหลักปัจจุบันแต่ละครั้ง  

3. ลูปหยุดเมื่อ **`max_val // div <= 0`** (เมื่อไม่มีหลักมากกว่า)

---

### **3. ตัวอย่างการทำงาน:**
#### Input:  
`data = [170, 45, 75, 90, 802, 24, 2, 66]`

#### ขั้นตอนการจัดเรียง:
**รอบที่ 1 (หลักหน่วย, div = 1):**
- `index = (a // 1) % 10`:
  - 170 -> 0, 45 -> 5, 75 -> 5, 90 -> 0, 802 -> 2, 24 -> 4, 2 -> 2, 66 -> 6  
- จัดเรียงใน `result`: `[170, 90, 802, 2, 24, 45, 75, 66]`

**รอบที่ 2 (หลักสิบ, div = 10):**
- `index = (a // 10) % 10`:
  - 170 -> 7, 90 -> 9, 802 -> 0, 2 -> 0, 24 -> 2, 45 -> 4, 75 -> 7, 66 -> 6  
- จัดเรียงใน `result`: `[802, 2, 24, 45, 66, 170, 75, 90]`

**รอบที่ 3 (หลักร้อย, div = 100):**
- `index = (a // 100) % 10`:
  - 802 -> 8, 2 -> 0, 24 -> 0, 45 -> 0, 66 -> 0, 170 -> 1, 75 -> 0, 90 -> 0  
- จัดเรียงใน `result`: `[2, 24, 45, 66, 75, 90, 170, 802]`

**Output:**  
`Sorted Array: [2, 24, 45, 66, 75, 90, 170, 802]`

---

### **จุดเด่นของโค้ด:**
1. ง่ายต่อการเข้าใจและนำไปใช้
2. ไม่มีการเปรียบเทียบโดยตรง ใช้หลักคณิตศาสตร์ล้วนๆ
3. ใช้เวลา \( O(n \cdot k) \) ซึ่งเหมาะสำหรับรายการตัวเลขขนาดใหญ่ที่ค่า \( k \) (จำนวนหลัก) น้อย

---

### **ข้อสังเกต:**
- หาก `arr` มีจำนวนตัวเลขที่มากเกินไป อาจเกิดปัญหา **หน่วยความจำ** เพราะ `result` อาจโตเกินไป  
- ควรปรับปรุงการสร้าง bucket เพื่อให้รองรับปริมาณข้อมูลจำนวนมากและประสิทธิภาพที่ดีขึ้น